[{"body":"I've been involved in Full Stack for a while now in one form or another(either maintaining, designing or working on Full Stack projects). Even during school time, I was building websites for myself and my friends. I've built sites commercially even. Although I've been using either pure HTML+JS or even PHP/Perl at some point. I rarely liked this activity, especially since the visual designs of the web pages were lacking and I just couldn't make myself study some visual design :(\nAt some point in time, I learned Django and Flask. I enjoyed building web apps using these frameworks a little bit more than in my school days when Python wasn't invented yet. However, my outlook changed a little bit, when I tried writing embedded Web servers that served Angular/React SPA apps! Not to mention Web3 dApps that I've been exploring for a few years already.\nTherefore it was not a surprise that I chose Django for ITOHI blog. I decided I didn't want to build anything myself and instead used Mezzanine CMS. And it was good for a while. I simply ran it bare on my server(Huge security risk, although despite many thousands of exploit scans I was seeing in the logs daily it remained unhacked). Until I had to rebuild my server(the experiments I was doing required a newer Linux kernel). And this is where the frustration came in - the management of all the services that are needed for running Django... Not to mention the low performance of the whole shebang. Also, I found myself immersed in code a lot these several years. And I discovered that I actively avoided logging into this otherwise convenient CMS. Drafts of new blog posts started piling up...\nAt some point in time I said \u0026quot;Enough!\u0026quot; and googled \u0026quot;Golang CMS\u0026quot; or something of resemblance. One particular result caught my eye: Hugo: The world's fastest framework for building websites. This also was urged by the fact that I was building several projects that required proper performant backend (spoiler: I'm working on a distributed robot communication system based on NATS, gRPC. My aquarium being the testbed). And the fact, that I was actively migrating from Python to Golang(It went as far as migrating some C/C++ embedded projects to TinyGo! - that's how excited I am about Go.).\nHugo Contrary to what I was used to, Hugo is not a framework. It is not a template. It is not even a server or a library. It's a Static Site rendering toolkit. The great thing about it is that you write Markdown and Hugo builds HTML, CSS and everything you need for your users to view your creation.\nThere are lots of themes, plugins, etc. Although, it appears that there are no default themes or recommended themes, so you must choose the one that is best fitting to your niche. Or, you can always create one. The Hugo website has ample resources to help you out there...\nThere are many tutorials on how to set up a basic Hugo site, even how to deploy it to Netlify or a similar service, so I won't be covering these. Instead, I'll cover what I found little info about and had to inspect a few projects in order to achieve what I wanted.\nWorkflow The workflow actually really appeals to the way I used to work recently. Basically what you do is setup your favorite Static Site hosting, CI/CD pipeline for deployment and start writing those nice Markdown posts :)\nAt least that is what I've done:\nSetup Hugo project Choose a theme (hugo-clarity) Configure the theme Configure markdown (added Mermaid, Charts.js, WaveDrom, and Graph-Viz) Setup Github Pages Setup Github Actions Theme configurability Most themes allow you to customize certain parts of it. For example, if you want to add a script or a style sheet - you can do that using layouts. Every theme has different ways to do that. The easiest way to figure out how to add something that is not in the theme is to inspect themes/\u0026lt;theme name\u0026gt;/layouts/_defaults/baseof.html. Then look at what is referenced there. Look at these files and make note of empty ones.\nFor example, hugo-clarity theme has layouts/partials/hooks folder (referenced in \u0026lt;head\u0026gt;...\u0026lt;/head\u0026gt; section in baseof.html). There are two partials head and head-end. I have used the head-end partial (layouts/partials/hooks/head-end.html) to add such features as Mermaid diagrams, Charts.js and others.\nSometimes Hugo serve fails Sometimes hugo serve fails and won't render your site properly. I found out that running hugo mod clean and then hugo serve again helps. I haven't encountered that while using git submodules, however, here I decided to use hugo modules instead. And apparently, Hugo module's cache sometimes corrupts or gets outdated. And in that case, Hugo renderer cannot find the required templates.\nGoAT GoAt is a really powerful graphing tool that creates SVG from ASCII art. This is really helpful for those who cannot decide what tool to use: Paint, GIMP, InkScape, or Draw.io for their graphs... Goat actually comes for free with Hugo.\n1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 Generated using this code:\n1```goat 2 . . . .--- 1 .-- 1 / 1 3 / \\ | | .---+ .-+ + 4 / \\ .---+---. .--+--. | \u0026#39;--- 2 | \u0026#39;-- 2 / \\ 2 5 + + | | | | ---+ ---+ + 6 / \\ / \\ .-+-. .-+-. .+. .+. | .--- 3 | .-- 3 \\ / 3 7 / \\ / \\ | | | | | | | | \u0026#39;---+ \u0026#39;-+ + 8 1 2 3 4 1 2 3 4 1 2 3 4 \u0026#39;--- 4 \u0026#39;-- 4 \\ 4 9``` Mermaid Mermaid is a versatile graphing tool that supports many different graphs. For example, class diagram can be drawn like this:\nclassDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label Generated using this code:\n1```mermaid 2classDiagram 3Class01 \u0026lt;|-- AveryLongClass : Cool 4Class03 *-- Class04 5Class05 o-- Class06 6Class07 .. Class08 7Class09 --\u0026gt; C2 : Where am i? 8Class09 --* C3 9Class09 --|\u0026gt; Class07 10Class07 : equals() 11Class07 : Object[] elementData 12Class01 : size() 13Class01 : int chimp 14Class01 : int gorilla 15Class08 \u0026lt;--\u0026gt; C2: Cool label 16``` Charts.js Sometimes it is needed to show some charts. And here is how to do it:\n{ \"type\": \"bar\", \"data\": { \"labels\": [\"Red\", \"Blue\", \"Yellow\", \"Green\", \"Purple\", \"Orange\"], \"datasets\": [{ \"label\": \"Bar Chart\", \"data\": [12, 19, 18, 16, 13, 14], \"backgroundColor\": [ \"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\" ], \"borderColor\": [ \"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\", \"rgba(255, 159, 64, 1)\" ], \"borderWidth\": 1 }] } } Generated using this code:\n1```chart 2{ 3 \u0026#34;type\u0026#34;: \u0026#34;bar\u0026#34;, 4 \u0026#34;data\u0026#34;: { 5 \u0026#34;labels\u0026#34;: [\u0026#34;Red\u0026#34;, \u0026#34;Blue\u0026#34;, \u0026#34;Yellow\u0026#34;, \u0026#34;Green\u0026#34;, \u0026#34;Purple\u0026#34;, \u0026#34;Orange\u0026#34;], 6 \u0026#34;datasets\u0026#34;: [{ 7 \u0026#34;label\u0026#34;: \u0026#34;Bar Chart\u0026#34;, 8 \u0026#34;data\u0026#34;: [12, 19, 18, 16, 13, 14], 9 \u0026#34;backgroundColor\u0026#34;: [ 10 \u0026#34;rgba(255, 99, 132, 0.2)\u0026#34;, 11 \u0026#34;rgba(54, 162, 235, 0.2)\u0026#34;, 12 \u0026#34;rgba(255, 206, 86, 0.2)\u0026#34;, 13 \u0026#34;rgba(75, 192, 192, 0.2)\u0026#34;, 14 \u0026#34;rgba(153, 102, 255, 0.2)\u0026#34;, 15 \u0026#34;rgba(255, 159, 64, 0.2)\u0026#34; 16 ], 17 \u0026#34;borderColor\u0026#34;: [ 18 \u0026#34;rgba(255, 99, 132, 1)\u0026#34;, 19 \u0026#34;rgba(54, 162, 235, 1)\u0026#34;, 20 \u0026#34;rgba(255, 206, 86, 1)\u0026#34;, 21 \u0026#34;rgba(75, 192, 192, 1)\u0026#34;, 22 \u0026#34;rgba(153, 102, 255, 1)\u0026#34;, 23 \u0026#34;rgba(255, 159, 64, 1)\u0026#34; 24 ], 25 \u0026#34;borderWidth\u0026#34;: 1 26 }] 27 } 28} 29``` WaveDrom Since this blog is mostly about electronics and embedded programming, I need to draw timing diagrams. And WaveDrom is a perfect way to add them:\nGenerated using this code:\n1```wave 2{ signal: [ 3 { name: \u0026#34;clk\u0026#34;, wave: \u0026#34;p.....|...\u0026#34; }, 4 { name: \u0026#34;Data\u0026#34;, wave: \u0026#34;x.345x|=.x\u0026#34;, data: [\u0026#34;head\u0026#34;, \u0026#34;body\u0026#34;, \u0026#34;tail\u0026#34;, \u0026#34;data\u0026#34;] }, 5 { name: \u0026#34;Request\u0026#34;, wave: \u0026#34;0.1..0|1.0\u0026#34; }, 6 {}, 7 { name: \u0026#34;Acknowledge\u0026#34;, wave: \u0026#34;1.....|01.\u0026#34; } 8]} 9``` Graph-Viz When Mermaid lacks versatility, or you need to add something really unique, you can definitely do it with Graph-Viz using .DOT language. However, I have added an outdated JS library that uses hacks to enable GraphViz support via JS... So I'm not sure when that feature goes out of date...\ndigraph G { subgraph cluster_0 { style=filled; color=lightgrey; node [style=filled,color=white]; a0 -\u003e a1 -\u003e a2 -\u003e a3; label = \"process #1\"; } subgraph cluster_1 { node [style=filled]; b0 -\u003e b1 -\u003e b2 -\u003e b3; label = \"process #2\"; color=blue } start -\u003e a0; start -\u003e b0; a1 -\u003e b3; b2 -\u003e a3; a3 -\u003e a0; a3 -\u003e end; b3 -\u003e end; start [shape=Mdiamond]; end [shape=Msquare]; } Generated using this code:\n1```viz-dot 2digraph G { 3 4 subgraph cluster_0 { 5 style=filled; 6 color=lightgrey; 7 node [style=filled,color=white]; 8 a0 -\u0026gt; a1 -\u0026gt; a2 -\u0026gt; a3; 9 label = \u0026#34;process #1\u0026#34;; 10 } 11 12 subgraph cluster_1 { 13 node [style=filled]; 14 b0 -\u0026gt; b1 -\u0026gt; b2 -\u0026gt; b3; 15 label = \u0026#34;process #2\u0026#34;; 16 color=blue 17 } 18 start -\u0026gt; a0; 19 start -\u0026gt; b0; 20 a1 -\u0026gt; b3; 21 b2 -\u0026gt; a3; 22 a3 -\u0026gt; a0; 23 a3 -\u0026gt; end; 24 b3 -\u0026gt; end; 25 26 start [shape=Mdiamond]; 27 end [shape=Msquare]; 28} 29``` Actually, I decided to use Graph-Viz after I discovered WireWiz tool that allows generating wiring diagrams. And internally it uses Graph Python library. I thought I could replicate it using pure GraphViz engine since sometimes it is really handy showing how certain prototypes are wired together without actually drawing any schematics...\ndigraph structs { node [shape=record]; rankdir=LR; esp32 [label=\"ESP32 | { {PIN|GPIO26|GPIO25|GPIO22|GPIO0|EN|GND|VCC} | {Name|\u003c26\u003e BCK|\u003c25\u003e WS|\u003c22\u003e DOUT|\u003c0\u003e MCLK|\u003c7\u003e EN|\u003c5\u003e GND|\u003c6\u003e VCC} }\"]; pwr [label=\"POWER | {\u003c5\u003e GND} | {\u003c6\u003e VCC}\"]; cs4344 [label=\"CS4344 module | { {PIN|\u003c1\u003e 1|\u003c2\u003e 2|\u003c3\u003e 3|\u003c4\u003e 4|\u003c5\u003e 5|\u003c6\u003e 6} | {Name|SDIN|SCLK|LRCLK|MCLK|GND|VCC} }\"]; // cs4344 [label=\"CS4344 module | {PIN|Name} | {\u003c1\u003e 1|SDIN} | {\u003c2\u003e 2|SCLK} | {\u003c3\u003e 3|LRCLK} | {\u003c4\u003e 4|MCLK} | {\u003c5\u003e 5|GND} | {\u003c6\u003e 6|VCC}\"]; \"pwr\":5 -\u003e \"esp32\":5[color=blue]; \"pwr\":5 -\u003e \"cs4344\":5[color=blue]; \"pwr\":6 -\u003e \"esp32\":6[color=red]; \"pwr\":6 -\u003e \"esp32\":7[color=blue]; \"pwr\":6 -\u003e \"cs4344\":6[color=red]; \"esp32\":0 -\u003e \"cs4344\":4; \"esp32\":26 -\u003e \"cs4344\":2; \"esp32\":25 -\u003e \"cs4344\":3; \"esp32\":22 -\u003e \"cs4344\":1; } Using this code:\n1```viz-dot 2digraph structs { 3 node [shape=record]; 4 rankdir=LR; 5 esp32 [label=\u0026#34;ESP32 | { {PIN|GPIO26|GPIO25|GPIO22|GPIO0|EN|GND|VCC} | {Name|\u0026lt;26\u0026gt; BCK|\u0026lt;25\u0026gt; WS|\u0026lt;22\u0026gt; DOUT|\u0026lt;0\u0026gt; MCLK|\u0026lt;7\u0026gt; EN|\u0026lt;5\u0026gt; GND|\u0026lt;6\u0026gt; VCC} }\u0026#34;]; 6 pwr [label=\u0026#34;POWER | {\u0026lt;5\u0026gt; GND} | {\u0026lt;6\u0026gt; VCC}\u0026#34;]; 7 cs4344 [label=\u0026#34;CS4344 module | { {PIN|\u0026lt;1\u0026gt; 1|\u0026lt;2\u0026gt; 2|\u0026lt;3\u0026gt; 3|\u0026lt;4\u0026gt; 4|\u0026lt;5\u0026gt; 5|\u0026lt;6\u0026gt; 6} | {Name|SDIN|SCLK|LRCLK|MCLK|GND|VCC} }\u0026#34;]; 8 \u0026#34;pwr\u0026#34;:5 -\u0026gt; \u0026#34;esp32\u0026#34;:5[color=blue]; 9 \u0026#34;pwr\u0026#34;:5 -\u0026gt; \u0026#34;cs4344\u0026#34;:5[color=blue]; 10 \u0026#34;pwr\u0026#34;:6 -\u0026gt; \u0026#34;esp32\u0026#34;:6[color=red]; 11 \u0026#34;pwr\u0026#34;:6 -\u0026gt; \u0026#34;esp32\u0026#34;:7[color=blue]; 12 \u0026#34;pwr\u0026#34;:6 -\u0026gt; \u0026#34;cs4344\u0026#34;:6[color=red]; 13 \u0026#34;esp32\u0026#34;:0 -\u0026gt; \u0026#34;cs4344\u0026#34;:4; 14 \u0026#34;esp32\u0026#34;:26 -\u0026gt; \u0026#34;cs4344\u0026#34;:2; 15 \u0026#34;esp32\u0026#34;:25 -\u0026gt; \u0026#34;cs4344\u0026#34;:3; 16 \u0026#34;esp32\u0026#34;:22 -\u0026gt; \u0026#34;cs4344\u0026#34;:1; 17} 18``` Note to self: Table-like labels are not supported in this version of Graphviz. Also, this version of GraphViz requires ports to be numbers and record names to be surrounded by double quotes in order to properly connect ports.\nConclusion So far I've been enjoying Hugo and the concept of SSW. And I only touched the surface of it. All the features mentioned previously were added sloppily and might induce certain unpleasant emotions in JS professionals... But for now, it works and that is all I need, currently.\nQuite recently I found out that Grammarly is available in VSCode!\n","link":"https://itohi.com/blog/adventures-with-hugo/","section":"blog","tags":["SSC","Golang","Go","GoHugo","Markdown"],"title":"Adventures with Hugo"},{"body":"","link":"https://itohi.com/blog/","section":"blog","tags":null,"title":"Blogs"},{"body":"","link":"https://itohi.com/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://itohi.com/tags/go/","section":"tags","tags":null,"title":"Go"},{"body":"","link":"https://itohi.com/tags/gohugo/","section":"tags","tags":null,"title":"GoHugo"},{"body":"","link":"https://itohi.com/tags/golang/","section":"tags","tags":null,"title":"Golang"},{"body":"","link":"https://itohi.com/","section":"","tags":null,"title":"ITOHI"},{"body":"","link":"https://itohi.com/tags/markdown/","section":"tags","tags":null,"title":"Markdown"},{"body":"","link":"https://itohi.com/tags/ssc/","section":"tags","tags":null,"title":"SSC"},{"body":"","link":"https://itohi.com/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://itohi.com/categories/technology/","section":"categories","tags":null,"title":"Technology"},{"body":"","link":"https://itohi.com/tags/a2dp/","section":"tags","tags":null,"title":"a2dp"},{"body":"","link":"https://itohi.com/categories/acoustics/","section":"categories","tags":null,"title":"acoustics"},{"body":"","link":"https://itohi.com/acoustics/","section":"acoustics","tags":null,"title":"Acoustics"},{"body":"","link":"https://itohi.com/tags/arduino/","section":"tags","tags":null,"title":"arduino"},{"body":"","link":"https://itohi.com/tags/audio/","section":"tags","tags":null,"title":"audio"},{"body":"","link":"https://itohi.com/tags/bluetooth/","section":"tags","tags":null,"title":"bluetooth"},{"body":"","link":"https://itohi.com/tags/esp32/","section":"tags","tags":null,"title":"esp32"},{"body":"I was building a Christmas set of spherical speakers just to familiarize myself with ADAU1401 Sigma DSP. And I wanted to add Bluetooth capability to the speakers so that they could receive sound data from an old Samsung Galaxy Node 10.1 in the kitchen.\nGranted, I have ordered some Bluetooth audio receivers, however, while they are being shipped, I thought to myself: Hey, I already have powerful CPUs(ESP32) with Bluetooth. These chips have I2S and I have I2S DACs waiting for another project! Why don't I give it a try and just google some Arduino projects that connect ESP32 A2DP sink with I2S and use that as a receiver?\nWell, It would be really simple, except that I decided to use dirt-cheap Cirrus Logic CS4344 modules... And these modules require a master clock to function properly. Little did I know, that MCLK output of the WROOM modules that I had was really unstable. I was even doubting my logic analyzer recordings!\nFirmware There is ESP32-A2DP - a very useful library that should cover all your needs with respect to Bluetooth and I2S. The most simple way to create a Bluetooth receiver using this library and an ESP32 is just 7 lines of code!\n1#include \u0026#34;BluetoothA2DPSink.h\u0026#34; 2 3BluetoothA2DPSink a2dp_sink; 4 5void setup() { 6 a2dp_sink.start(\u0026#34;ESP_SPEAKER\u0026#34;); 7} 8 9void loop() { 10} However, As I mentioned, at first I tried to use CS4344 I2S DAC that supports up to 196kHz sample rate. Thus I also needed to add a MCLK output like so:\n1void setup() { 2 i2s_pin_config_t my_pin_config = { 3 .mck_io_num = 0, 4 .bck_io_num = 26, 5 .ws_io_num = 25, 6 .data_out_num = 22, 7 .data_in_num = I2S_PIN_NO_CHANGE 8 }; 9 a2dp_sink.set_pin_config(my_pin_config); 10 a2dp_sink.start(\u0026#34;ESP_SPEAKER\u0026#34;); 11} Note, however, that ESP32 can only use GPIO 0, 2 and 3 for MCLK output, however, I was already using these pins for programming as well as reading out logs except for GPIO0.\nInternal ESP32 DAC It is well known, that ESP32 has two built-in DACs that also accept I2S input. You can route it via I2S config like so:\n1 const i2s_config_t i2s_config = { 2 .mode = (i2s_mode_t) (I2S_MODE_MASTER | I2S_MODE_TX | I2S_MODE_DAC_BUILT_IN), 3 .sample_rate = 44100, // corrected by info from bluetooth 4 .bits_per_sample = (i2s_bits_per_sample_t) 16, /* the DAC module will only take the 8bits from MSB */ 5 .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT, 6 .communication_format = (i2s_comm_format_t)I2S_COMM_FORMAT_STAND_MSB, 7 .intr_alloc_flags = 0, // default interrupt priority 8 .dma_buf_count = 8, 9 .dma_buf_len = 64, 10 .use_apll = false 11 }; 12 13 a2dp_sink.set_i2s_config(i2s_config); The resolution of that DAC is only 8 bits, therefore it is unsuitable for HiFi music I was trying to extract from this module :) Therefore, I did not even consider using it. But, for those who would like to try it out, you can find examples in ESP32-A2DP.\nHooking up CS4344 DAC After downloading the firmware, I hooked up the DAC to the ESP32 and listened to the output of it via 3.5mm jack. And the sound was horrible. I was very frustrated and tried different clock rates, pins. I even tried to build IDF A2DP examples... Although the sound was a little bit better with raw IDF framework, it was still garbage. I even thought it was due to the very low output driving capabilities of the CS4344, even though it was defective... Until I hooked up a logic analyzer to monitor what is happening on the I2S interface.\nThis is what should be on the I2S interface(not particularly phase-correct):\nHowever, this is what I got on two different ESP32 dev boards as well as the raw module:\nAccording to CS4344 datasheet, the MCLK duty cycle should be 50% with a very small margin. There is no strong requirement for the phase relationship between MCLK and other signals except that they should be synchronous. CS4344 even can generate BCLK clock from MCLK, however, I barely see why that would be more convenient than generating MCLK from BCLK, but hey, the module is dirt-cheap :)\nIn both cases, LRCLK run at 48kHz, which was right. As well as BCLK(which is Fs2BitsPerSample). DOUT was a bit off, but CS4344 claims to detect the mode properly. And even if it didn't detect the I2S signal mode, the sound should still not contain so much noise and distortion! According to measurements, the MCLK signal frequency varied between 13MHz and some odd 7MHz. Unfortunately, my scope analog bandwidth is just at 8MHz, so I couldn't see the actual waveform of the MCLK. But the problem seemed evident - MCLK was not stable at all.\nPCM5102 to the rescue Frustrated, I desoldered the Cirrus Logic DAC and plugged in PCM5102 and viola! Perfect sound! No noise, no distortion - perfect. Although, this board has to be configured like so:\nThe thing is, PCM5102 can generate its own MCLK from BCLK provided by ESP32, so that confirms my(grounded and confirmed by a logic analyzer) suspicion, that the MCLK output from ESP32 is garbage. Interestingly enough, I did not find any useful articles about marrying ESP32 and CS4344, but there was one elusive question on some forum regarding dirty MCLK output... But there were no further messages on that topic :(\nThe finished Bluetooth receiver addin After I calmed down from frustration about CS4344, I added filters on the power side of the board, soldered everything to ESP32 proto board and attached it to a refactored subwoofer of Christmas spherical speakers with a double-sided sticky tape...\nTODO I'll need to investigate further why ESP32 MCLK is so jittery and connect CS4344 to ADAU1701 to confirm that the DAC itself is working...\nIf the MCLK output of ESP32 was stable, I then could then route it to the ADAU1401 directly, so that the DSP could operate as a slave and would be able to receive I2S data stream directly. This way I wouldn't even need so heavy filtering on the power supply side from both ADAU and the ESP32...\n","link":"https://itohi.com/acoustics/esp32-as-bluetooth-audio/","section":"acoustics","tags":["audio","speakers","esp32","arduino","bluetooth","i2s","a2dp"],"title":"ESP32 as Bluetooth audio receiver (A2DP sink)"},{"body":"","link":"https://itohi.com/tags/i2s/","section":"tags","tags":null,"title":"i2s"},{"body":"","link":"https://itohi.com/tags/speakers/","section":"tags","tags":null,"title":"speakers"},{"body":"","link":"https://itohi.com/tags/acoustics/","section":"tags","tags":null,"title":"Acoustics"},{"body":"Years 2020, 2021 and 2022 have been tough for almost everyone. The pandemic, the war, global economic collapse, bancruptcies in Crypto sphere... You name it. Although, for me it was a rather productive period(despite a divorce spanning almost 3 years), since I have accustomed to working from home and working on various project remotely. The range of projects varied from working on a system that tailors advertisements to people behavior to optimizing Internet traffic by cleverly and autonomously arranging relay nodes all around the globe. All these projects mainly keep the food on my table and fund my other, more experimental, theoretical or sometimes even absurd ideas.\nDuring these challenging times I had an opportunity to work on different flavors of full stack engineering and development. At last had time and purpose to learn Go and play around with Rust. Also, got more experience with EasyEDA, switched from OpenSCAD to FreeCAD. Discovered TinyGo and used it for several embedded projects with great success. Experimented with SPA(Single Page Application) using React and even Go compiled to WASM(Fyne and directly manipulating DOM using React-like framework). I'll highligh several projects that I've been working long term and some updates on previous projects.\nCingulate-art This is actually a project with so much hope, but with a sad outcome. Basically, I've setup a web store that allows you to generate AI art using your own provided pictures. It is something similar to style transfer, but with much more added effects, filters, etc.\nSadly, I couldn't find a market for it, properly advertise it or even drive enough traffic to it. So I had to kill it after more than two years of SEO, Link building and social marketing... However, I have learned so much during this time about actual marketing, SEO and running your own Shopify store(I had several actually that helped to somewhat reduce the lost investments) :)\nESPReflow There was very little progress here(Although, to be fair, I haven't even written a post about this project). Mainly due to the fact, that the prototype was being successfully used for PCB baking and there was little need to improve anything. Although, there are some bugs here and there, the code does what I want it to do. Some people even were able to replicate the project.\nHowever, I have designed a second prototype board, succesfully tested it and put it aside for a bit. I need to rethink thermals as well as UX. The plan, of course, is to turn it into a product.\nESPMotion This project died out after I've designed a PCB, soldered everything and started testing. Something got me distracted from this project and I never really got back to it. (The cat run away, so basically I had noone to use this project for...)\nESPWeather I am still thinking about this one. I have sold a few boards on Tindie. There were no complaints and no further interest though. Although, I have been working on a more sophisticated board that allows to connect various I2C devices and even RS232 logger. Oh, And, also, It has a potential to actually measure rain fall by using this:\nEasyRobot The purpose of this project is to be able to quickly spin up an autonomous modular robot, that could have its brains literally scattered around the world. In other words, it implements a decentralized robotics framework that uses NATS for communication between modules.\nThe testbed for this platform is: The initial implementation was written in C++ and consisted of various motion drivers, Forward/Inverse Kinematics engine, some algebra and even a Neural Network engine. Later, I decided to port everything to Go. This is a slowly burning project that I contribute to when I have time and/or inspiration.\nI'll be posting some of the status updates on the whole project separately. Mostly that will involve topics about Deep NN architecture for depth estimation, visual odometry and online semantic map building.\nFishFeeder Caring for fish with my ADHD brain is rather challenging task. Therefore I've built this little fish tank reminder:\nActually, it is a variation on my other project Healthy Nudges, but embedded. The code is written in Go and uses little neat M5Stick module. It reminds me to feed the fish, do water changes and perform filter maintenance. The nudger is easily configurable:\n1\ticonImages = [][]uint16{ 2\ticons.FoodPng, 3\ticons.AquariumPng, 4\ticons.FilterPng, 5\t} 6 7\tcolors = []color.RGBA{ 8\t{G: 8}, 9\t{B: 8}, 10\t{R: 8}, 11\t} 12 13\tnudges = []Nudge{ 14\t{ 15\ttimestamp: time.Now(), 16\tdelay: time.Hour * 24, 17\tnudge: makeNudge(colors[0], icons.FoodPng), 18\t}, 19\t{ 20\ttimestamp: time.Now(), 21\tdelay: time.Hour * 24 * 7, 22\tnudge: makeNudge(colors[1], icons.AquariumPng), 23\t}, 24\t{ 25\ttimestamp: time.Now(), 26\tdelay: time.Hour * 24 * 30, 27\tnudge: makeNudge(colors[2], icons.FilterPng), 28\t}, 29\t} That is all there is :) However, the button functions are a bit more complicated and are designed to actually feed the fish. E.g. you can either just tread the fish or feed. The treat is like one portion of the food that can be dispensed whenever. While the feeding is usually initiated when the nudge is active by long-pressing the main button.\nIn all fairness, this is one of the most useful tools I've built for myself :)\nHealthy Nudges This is an attempt to learn Fyne - a framework for creating GUI applications in Go. I really like those apps that nudge you to take abreak from work. However, I find that most of them aren't really portable and somewhat lack in configurability.\nTherefore I've created this one.\nThe interface allows you to setup different nudges with different rules. Also, You can specify how obstructive they are. I postponed this project until Fyne implemented some needed features(such as System Tray support, etc) and will return to it at some point.\nCoin Watcher This is another project that I used as an excuse to learn more about Fyne. It allows you to setup a list of coins to monitor. There are two possible sources of the price data: Coinmarketcap or CoinGeko.\nI kind of abandoned this project, since I'm actually using various services that do that for me and provide much more features.\nPhingo The purpose of this project is to help me generate invoices automatically, rather than using Google Sheets and copy stuff... The idea, so far, is to write invoice templates in Markdown that would be converted into PDF. Also, this app would act as a balance sheet for the business and would help with accounting when the time to pay taxes comes.\nThe reason I'm not working on it as much as I'd like is simple: most of my income is in Crypto currently, therefore I can use online tools that track all the transactions and generate tax forms for me automatically. I don't actually have to write anything into anywhere myself(This is what I was aiming for with Phingo actually).\nHowever, I still want to be able to generate beautiful invoices automatically. Maybe even turn this app into online app (using Fyne and Webasm!) and perhaps even find paying users. The things that I'm still thinking about:\nhow to make it trustless - the goal is to store all the user data in the database encrypted. Username and password would be actually the private key to decrypt the data on the frontend! How to cover all the possible invoice types - I should probably stop thinking about that if I want to make progress. Acoustics This is actually the next big thing on my radar. I've been obsessing with audio quality for quite some time. Due to the vastness of the topic this deserves a separate sequence of posts. However, just to induce some appetite, here are some teasers:\nSpeaker measurement rig Now I can measure speaker impedance using REW!\nI'll be building a fully-contained Raspberry-Pi speaker measurement rig that I could take with me when potentially buying used speakers.\nSurround sound home theater The electronics consist of:\n5.1 cheap receiver from Aliexpress - I simply needed a Toslink -\u0026gt; 5.1 audio converter. 6x50w+2x100W+100W power amplifier based on TPA3116D2 MiniDSP 8x10 DSP board Refactored 60W soundbar acting as a center speaker (threw away the electronics) 2x Radiotehnika S250 speakers: filters removed and 3 sets of connectors added for three-amping Radiotechnika speakers woofer act as both the sub and low frequency woofer 50W Bass shaker screwed to the bottom of the couch - arguably the best addition I've made to the home theater! 2x3\u0026quot; speakers in Open Baffle configuration from Aliexpress acting as surround speakers Now, I can literally Netflix \u0026amp; Chill!\nSurround sound for my work place The electronics consist of:\n... and ... as Surround processors STM32 as controller and UX 5x50W+100W power amplifier based on TPA3116D2 for the speakers I have 3D printed open baffles for all six speakers for the sub I'm using a 10\u0026quot;(I think) cheap car ported sub I have found that the sub works better in my small room when the port is plugged Measured the response with REW and corrected delays and frequency responses with APO Equalizer... By the way, in comparison with boxed speakers(~15W speakers from Creative 5.1 set) I am much much more satisfied with the sound of open baffles, even though I'm running them in a non-optimal way.\nAs you can see, the front and surround speakers are in the corners... However, with properly configured delays I am able to place the scene more or less where I want!\nThe reason for the Open Baffle is three-fold:\nI wanted to experiment I was designing enclosures that I could print with 150x150x150 print volume... And figured, that Open Baffle would be the easiest to print with PET-G :) I got tired of enclosure resonances and port wooshings (even though I have reduced power at those frequencies.. ) Well, I am aware of this whole argument audiophiles make, that measurement equipment cannot measure certain characteristics of the audio reproduction system... And as a physicist I am sceptical of special cables, oxigen-free cables, speaker risers, etc., etc...\nHOWEVER, when performing measurements of the OpenBaffle(Well, I had to make sure that my speaker is better than the old one before actually comitting to the whole idea of replacing them!) and the old Creative speakers, I could actually hear the difference with my tone-deaf ears. And it wasn't flattering to the super-duper optimized Creative plastic speakers! The most important thing is, that I couldn't really see the noises that I was hearing neither on the frequency response, distortion graphs, nor on the waterfalls. Even though, with respect to distortions, the Open Baffle speakers win by a few dB, however, that is mostly due to the fact that these drivers are larger and overall better(BTW, Daytone 3\u0026quot; drivers are much better than Aliexpress ones).\nOverall, I mostly belive that the most important factors to sound clarity and quality are these:\nroom acoustic treatment speaker placement The next steps I am currently working on ADAU1456-based implementation of the amplifier and DSP(so that I could turn off APO for the main setup), where the whole audio tract would be completely digital!\nAlso, I'm working on a RAM(Room Acoustics Measurement - the name is work in progress) application that would be open-source variant of REW with a few interesting features:\nIt would be able to generate certain test signals The test signals would be coded so that the analyzer part of RAM would be able to figure out what kind of measurement was requested That would allow for a very intersting usecase - e.g. you could play the recording on a radio station and someone else somewhere else would be able to receive it, analyze it, and generate a report about the media frequency and phase characteristics... I have almost finished the core of the application and am working on the UX/UI part. Since the whole project is written in Go, I think, it will be possible to host the whole application as a SPA app using WASM!\nNOTE: The waterfall diagram shows frequencies reversed, basically the lower the frequency the farther away is the peak from the viewer. Also, frequency and the waterfall graphs show the RAW values(basically sub-hertz resolution), hence so much noise(comb-filtering as well as untreated room response). The most value of this app can be extracted by adding microphone calibration and a proper UI(These graphs were generated into an HTML using ECharts library).\n","link":"https://itohi.com/blog/how-its-been-in-2020-2022/","section":"blog","tags":["Projects","IoT","Acoustics","Golang"],"title":"How Its Been in 2020-2022"},{"body":"","link":"https://itohi.com/tags/iot/","section":"tags","tags":null,"title":"IoT"},{"body":"","link":"https://itohi.com/tags/projects/","section":"tags","tags":null,"title":"Projects"},{"body":"","link":"https://itohi.com/categories/summary/","section":"categories","tags":null,"title":"Summary"},{"body":"","link":"https://itohi.com/about/","section":"about","tags":null,"title":"Abouts"},{"body":"2022 Multilanguage support Migrate to Hugo Migrate backend from Python to Go Explore tinygo and embedded itohio Github organization created and repositories cloned from personal repo 2021-* Rebuilt the server Transitioned to containerized infrastructure Moved code to https://github.com/itohio repo Started working on EasyRobot framework Started working on Collective project Started working on Phingo project Up to 2021 Dismantled the server Was playing around with various messaging protocols Was playing around with various misc protocols/Wireguard 2019-04-18 Weather Station project became mature enough Weather Station submitted on Tindie ! 2018-07-10 First blogs shared on Hackaday.io ! Facebook page was created for ITOHI Signed up for Twitter Keywords updated Favicon updated 2018-07-02 Initial launch of the site First blog post ","link":"https://itohi.com/about/changelog/","section":"about","tags":null,"title":"Changelog"},{"body":"I can be contacted via various social networks you can find icons on the top of the page of. Alternatively, you could leave a comment here, or contact me via email:\n1 parts = (\u0026#34;info\u0026#34;, \u0026#34;itohi.com\u0026#34;) 2 email = \u0026#34;@\u0026#34;.join(parts) ","link":"https://itohi.com/about/contact/","section":"about","tags":null,"title":"Contact"},{"body":"What is ITOHI? ITOHI is an acronym for Invent This Invent That Open Hardware Inventions. This page hosts various Open Source and Open Hardware projects that I have created and wish to share with the world.\nWho am I My name is Andrius and I am a software engineer with a physics degree in telecommunication and electronics. My main passion lies in the research and development of various software as well as hardware projects. Mostly those projects stay in my closet collecting dust, however, the ITOHI project strives to change that.\nI have decided to create all the projects as Open Source/Open Hardware so that the community could benefit from whatever I create or invent. In fact, the whole site source code is Open Source also! I am not planning to give it all for free, of course, mind you! Some of the projects will be growing towards a full-blown product for those who don't wish to solder anything from scratch or wish to save some time by purchasing modules or other electronic widgets that I'll put out for sale.\nUntil I reach the maturity of selling, you are free to support my inventing stuff by donating :)\nFreelancing I've been having a really interesting career as a freelancer both in the hardware and software worlds. I take circuit engineering, and soldering jobs as well as development primarily using ASM, C/C++, C#, Python, Go languages for embedded platforms, or PC both Linux and Windows.\nI've been doing all kinds of projects ranging from some signal processing, and various process controllers to image processing and machine learning. When I was doing my Ph.D. I was writing various math-intensive algorithms as well as scientific apparatus controlling software that is being used even today.\nI've designed both hardware and software parts of the light spectrum analyzer that was used for liquid crystal research.\nI've built autonomous robots and written navigation AI for them.\nI've designed and built a massively parallel surveillance application.\nI've created a state-of-the-art algorithm for 3D model slicing designed for 3x independent printing heads 3D Printer during my CTO career at a 3D printer company.\nDeveloped an OpenVRL engine - Opensource Virtual Reality Library for 3D simulations in C++ that could run using D3D as well as my software renderer and OpenGL...\nDeveloped C++ template library for training and running neural networks (from simple Perceptrons to LSTMs) on embedded platforms...\nAnd many more...\nCurrently, I'm working as a freelancer on blockchain-related projects.\nAnyway, if you have any kind of interesting project, I'd gladly participate - just let me know :) Also, feel free to support me using Github Sponsorship!\n","link":"https://itohi.com/about/me/","section":"about","tags":null,"title":"About"},{"body":"This is a simple test for multilanguage support. Sometimes I feel like writing in native tongue, sometimes in multiple languages... So, let's see how that goes.\nHere's a comic strip about why I have so many unfinished projects:\n","link":"https://itohi.com/blog/multilanguage-test/","section":"blog","tags":null,"title":"Multilanguage Test"},{"body":"","link":"https://itohi.com/esp-reflow/","section":"esp-reflow","tags":null,"title":"Esp-reflows"},{"body":"","link":"https://itohi.com/tags/esp8266/","section":"tags","tags":null,"title":"esp8266"},{"body":" !!! WARNING: This project deals with mains power and high current !!! Please be careful if you wish to replicate any of its functionality and never work on a PCB or any open wires that are connected to the mains ! Author has no responsibility for your safety and wellbeing, so please take care of yourself.\nHow it works The purpose of this project is to control a heater of any sort to facilitate SMT reflow soldering utilizing a predefined temperature profile. Control of the heater is performed by ESP8266 or ESP32 chip via Web UI over WiFi.\nTo achieve that, readings from a thermocouple are used for closed loop temperature control of the target board. The controller does it's best to follow a preconfigured temperature profile for a particular SMT soldering. Of course the accuracy of the temperature profile achieved is heavily dependant on the thermal properties of the heating element, environment, the boards, etc. The controller tries to compensate for that by the means of a PID controller which has to be tuned to a particular setup.\nPrototype Hardware At first I put everything into an old smart socket like so:\nI quickly found that the relay introduces too many spikes into the mains by switching a high power inductive load in the middle of the cycle... I mean, the LCD monitor was flickering like crazy and my audio amplifier was restarting randomly. That's when I found a few of these guys(SSR - a Solid State Relay) that have zero-crossing detection built in:\nI simply connected them in parallel and had no more issues with EMI whatsoever. One of these is rated for about 2A, however, they rarely sustain that kind of power for a long period. So, three of them happened to be pretty happy with 2kW load I subjected them to - barely even warm even inside that tight space. After I was satisfied with how everything works firmware-wise, I designed the following board:\nSome generic mechanical timer enclosure is used for the plug, socket and, well, enclosure. max6675 is used for interfacing with a thermocouple. Generic optopair is used for controlling a 10A relay (for the prototype). Weemos D1 mini is used for the brains. Some cheap 1200W IR Hotplate is used for the load a peace of prototype board is used for dummy board Schematics EasyEDA project page: https://easyeda.com/andrius.mikonis/ESPReflow-f4c523157afa47758e46728248cdb19b\nAssigned pins 1#define thermoDO 13 // D7 2#define thermoCS 12 // D6 3#define thermoCLK 14 // D5 4#define relay 4 // D2 Building Angular Frontend Angular front end source is in web-src-angular folder and should be built using nodejs. After binaries are built, they should be gzipped and copied into data/web folder before uploading.\nBackend Backend is implemented using Arduino SDK and built using PlatformIO. Before building, please copy src/sample_wificonfig.h to src/wificonfig.h and add default Wireless Network configuration. You will be able to edit this configuration via Web interface later.\nModes of operation Reflow In this mode the controller will perform reflow algorithm following selected reflow profile. Controller will turn off the mode once the temperature reaches safe values after the profile is completed.\nCalibrate In this mode a selected calibration algorithm will be used to find optimal PID controller parameters. Controller will turn off the mode once the temperature reaches safe values after the calibration is completed.\nKeep Target In this mode the controller will reach and maintain target temperature. Useful to check PID configuration. default PID configuration will be used in this mode.\nFlashing There are two ways to flash the controller - via serial or via OTA.\nSerial Find RX/TX/GND pins on the board, connect your serial adapter and flash either Arduino, PlatformIO or whatever flasher you like. NOTE: RX/TX pins are NOT 5V tolerant. Please use 3.3V serial adapter or level shifter from 5V\nOTA When the controller is first turned on it creates an AP with the name ESPReflow and the ip address 192.168.4.1. Connect to the controller, wait until the page loads and go to Setup, enter WiFi SSID and credentials. Save the configuration and reboot. After this is done it will connect to the specified WiFi AP and will register it's own domain as ReflowControl.local. Tuning and operation of the controller can then be done.\nOTA HTTP upload You can upload a firmware binary using Setup - just upload the new firmware on the WebUI.\nUsage Connect your hotplate/oven One tip, though - instead of simply throwing the temperature probe into the oven or onto the heatplate, you should choose a PCB that is approximately the same size and the same number of layers as a reference PCB and mount the probe to this PCB. Also, place this PCB in the approximately the same place/way as the PCB you are soldering.\nThat way you will achieve the best calibration as well as temperature profile.\nIR Hot plate NOTE: It is best to leave a little bit of space between the hotplace and the PCB. This is due to the nature of heating - it is done by IR waves instead of direct heat transfer. I had little success calibrating the controller, when the PCB and the reference PCB was directly on the hotplate.\nOven K-type thermal probe Thermocouple must be placed on a dummy board, that would approximately resemble the target boards. For best results that board must be placed in a similar matter as the target board. Furthermore, since hotplates do not heat evenly(even some ovens), care must be taken to allow dummy board be heated the same way as the target board(i.e. it must be placed approximately the same distance and orientation as the target board in respect to the heating elements). Otherwise you may burn the target board.\nPID tuning PID tuning must be done for every heating device individually. You can do it by trial and error, or ESPReflow can do it for you. There are several auto tuning algorithms available (a slightly modified PID-aTune library fork):\nZIEGLER_NICHOLS_PI ZIEGLER_NICHOLS_PID TYREUS_LUYBEN_PI TYREUS_LUYBEN_PID CIANCONE_MARLIN_PI CIANCONE_MARLIN_PID AMIGOF_PI PESSEN_INTEGRAL_PID SOME_OVERSHOOT_PID NO_OVERSHOOT_PID\u0026quot; Reflow profile Problem Solving Unable to properly tune IR Hot plate During development a cheap IR hot plate was used. I found that if you place your temperature probe and the boards on the hot plate itself it would be very hard to control the temperature of the board properly. So, I used aluminium raisers, that raise the board around 5-10mm from the hot plate so that IR radiation would heat the boards instead of the glass plate.\nThe code can be found in this repository.\n","link":"https://itohi.com/esp-reflow/esp8266-driven-oven-controller-over-web-ui/","section":"esp-reflow","tags":["esp8266","Arduino","React","Reflow"],"title":"Esp8266 Driven Oven Controller Over Web Ui"},{"body":"","link":"https://itohi.com/tags/react/","section":"tags","tags":null,"title":"React"},{"body":"","link":"https://itohi.com/tags/reflow/","section":"tags","tags":null,"title":"Reflow"},{"body":"","link":"https://itohi.com/categories/tools/","section":"categories","tags":null,"title":"tools"},{"body":"My son has a cat. And I've become very curious about the cat's feeding and toilet habits. Mainly I'm interested in how long does it take him to go to the toilet after eating as I've noticed a pattern: At first he goes to the kitchen, eats and then runs around the house wrecking havoc for some time and then goes to the toilet. So I'm curious whether this is his usual routine and moreover how many times during the day and night does he need to use his toilet. I might even build a collar for him to track the magnitude of his movements in the future :)\nIn order to accomplish this task at first I was thinking about using RFID tags that I have plenty. But that is rather crude... Then I remembered, that I have a couple of PIR motion sensors collecting dust. So I decided to clean that dust away, and go for a more interesting approach. So the idea is this: build a smart motion sensor, that would connect to the internet once the motion is detected and post some message somewhere. I would then gather those messages along with timestamps and analyze the data in some way later. It seemed that PIR sensor and ESP-1 module had the best chance of perfect partnership.\nProgramming I decided to use MQTT broker that I have already setup on some free service, so that I could get notifications of motion events at my phone. I was using PubSubClient Arduino Library for MQTT in my other projects, but this time I decided to try MQTT Arduino Library. Although I was considering building my own library, because neither of those two support additional data passing to message callbacks. But that's a story for another time. I'm glad that I didn't go that route, because I wouldn't be able to finish this project in half a day :)\nSo, The program itself is very simple - when ESP boots up, it connects to WiFi, then to MQTT broker, publish a message to \u0026quot;motion\u0026quot; topic with payload as ESP MAC address and then go to sleep indefinitely. Basicaly the whole code looks like this:\n1\u0026lt;pre\u0026gt;the code \u0026lt;br /\u0026gt;bla \u0026lt;br /\u0026gt;bla\u0026lt;/pre\u0026gt; You can find this code in this github repository. Just keep in mind, that I'll be developing it further(Like adding web interface for configuration, OTA, etc.), thus it'll get more complicated.\nAnyway, I flashed the code to an ESP-1 module using my custom programmer and started to experiment with how to make the PIR sensor interface with the ESP. The requirement was, that the ESP would be permanently in deep sleep mode until there was motion detected.\nAt first I tried to build a simple circuit consisting of NPN transistor, a couple of resistors and a capacitor to trigger RST pin of the ESP, but that was very unreliable, and, honestly, ugly. After several variants of the trigger circuit I came up with the following idea: What if the ESP is disabled altogether until the motion is detected ?\nAfter first try it appeared to be working really well! Basically what I did, was connecting RST and EN pins together on the ESP, and connect those pins to the OUT of the PIR sensor. Also I've connected GPIO0 to VCC for good measure. Then I adjusted the ON time on the PIR sensor to about 10-20 seconds, since the ESP need at most 5 seconds to connect to WiFi and send MQTT message. That works, because normally the output of the PIR sensor is low, and it goes high when it detects motion. This high signal is enough to enable and boot the ESP chip. The signal should be high long enough for the ESP to finish publishing the message to MQTT. Luckily the PIR motion sensor I have has a potentiometer that allows to configure not only sensitivity, but the trigger timeout.\nI desoldered the header pins from ESP-1 module so it would take much less space. Then the PIR sensor had to be modified a little bit. As you may know, the PIR sensor board has an inbuilt voltage regulator. That had to go, but I didn't want to mess with the board itself. Therefore what I did was solder a little jumper over a reverse protection diode and the regulator like so:\nAnd that is basically it! Just connect a LiPo or LiIon battery and the Smart PIR sensor is ready! I've built three of these - two for the cat, and one for my roommate to check how often she goes to the balcony for a smoke despite a prominent NO SMOKING sign on the door :)\nAdditionally I wrapped the boards in shrink tubes cutting out windows for the pins and the sensor lens, stuck some double-sided tape and places the sensors at strategic locations :)\n","link":"https://itohi.com/blog/esp-1-smart-motion-sensor-using-pir-and-mqtt/","section":"esp-motion","tags":["arduino","atom","esp8266","IoT","Sensors"],"title":"Arduino ESP8266 Smart Motion Sensor using PIR and MQTT"},{"body":"","link":"https://itohi.com/tags/atom/","section":"tags","tags":null,"title":"atom"},{"body":"","link":"https://itohi.com/esp-motion/","section":"esp-motion","tags":null,"title":"Esp-motions"},{"body":"","link":"https://itohi.com/categories/iot/","section":"categories","tags":null,"title":"iot"},{"body":"","link":"https://itohi.com/tags/sensors/","section":"tags","tags":null,"title":"Sensors"},{"body":"In a previous post I've described how to build a Weather Station based on ESP8266 chip and various breakout boards you can buy e.g. on Aliexpress. In this post, however I'll share with you how I built a standalone PCB boards containing all the required components. To recap - this is a ESP8266 based Weather Station, that measures surrounding air temperature, humidity, pressure along with light and battery voltage. Connects to an MQTT broker and reports it's data there. There are three variants: bare board with no display, which can be connected to a lipo battery, solar panel and sit somewhere with plenty of sunlight for ages, or it can have either an ePaper display or 0.96\u0026quot; OLED display and sit on your desk.\nMy main motivation for this project was to build a network of sensors scattered around my house and city so that I could monitor the weather myself. One of the use cases involved a two room biology museum where people were concerned about air temperature and humidity, where I used two headless boards enclosed in 3D printed case and simple python MQTT client to gather all the data in a spreadsheet for further analysis.\nOpenSCAD models for the cases as well as the firmware code are in the git repository.\nDesigning circuit board I decided to have three variants of the Weather Station: headless, with OLED or ePaper displays. Headless can be flashed into OLED or ePaper board. All the designs were done using EasyEDA software, all the parts and PCBs were ordered using their services.\nScematics The schematics contains all the support components for ESP8266, LiPo/LiIon battery charger based on TP4056. Everything is being powered by low drop out voltage regulator RT9013-33GB. BME280 is connected to pins that usually serve as a Serial port. However in order to fit ePaper I run out of pins. The sensor doesn't mind the initial bootup messages, that ESP spills into that port. Light sensor and measurement of battery voltage is implemented using MAX4544EUA+T analog switch. Battery voltage is read out using R5/R6 voltage divider and light sensor using R7 and R8. GPIO5 is used for changing sensitivity. Basically there are two ranges for the light sensor due to limited ADC resolution and high dynamic range of the photo resistor used as a light sensor. So when there is little light GPIO5 is in High Z state(configured as input), and if there is a lot of light detected by the photo resistor, GPIO5 pin is driven LOW, so that R7 and R8 are connected in parallel.\nPCB I tried to make the boards as small as possible keeping in mind ESP PCB antenna requirements and trying to minimize ESP heat influence on the BME sensor. Thus I made some cutouts on the pcb board and made as long traces to the chip as possible. I ordered the PCBs along with stencils from JLCPCB and soldered them using my ESPReflow project which I will disclose later some time :)\nHeadless/OLED You can run this board without an OLED. And if you wish to connect one, make sure your OLED screen has the following pinout:\nSome variants on the market have VCC and GND pins reversed. On some boards I have missed pin descriptions for the OLED pins. Here they are (from top to bottom. square pad is VCC):\nRST GPIO0 TXD (SDA) RXD (SCL) GND VCC ePaper This board includes connectors for both OLED and ePaper, which is WaveShare 2.13\u0026quot; ePaper HAT. The firmware assumes a RED+BLACK+WHITE variant. Like this: One feature that ePaper variant has is the ability to listen for other stations and display them all on the screen. Also it is a really low power solution that lasts for a couple of months on a single 600mAh battery :)\nBuilding the firmware For development I use Atom IDE with installed PlatformIO. If you don't have this setup, then you can refer to a post where I describe how to install Atom and PlatformIO.\nFirst you need to obtain the latest sources:\n1git clone https://github.com/itohio/ESPWeather Then open ESPWeather project with Atom to build it. Alternatively, if you wish to work on the code and add features yourself, feel free to fork the repo and use it instead of the original one. Before building it, you should copy sample_wificonfig.h file into wificonfig.h and edit WIFI as well as MQTT config values:\n1// Setup Wifi networks 2#define WIFI_SSID \u0026#34;*ssid*\u0026#34; 3#define WIFI_PASSWORD \u0026#34;*passwd*\u0026#34; 4#define MQTT_ID \u0026#34;*mqtt-user*\u0026#34; 5#define MQTT_PASSW \u0026#34;*mqtt-passw*\u0026#34; 6#define MQTT_PORT *16769* 7#define MQTT_URL \u0026#34;*m23.cloudmqtt.com*\u0026#34; Second thing is to define proper variant defines which should be done in platformio.ini file. There you can find already predefined variants. You can either use one of them, or create your own. If you are using OTA, then you are gonna need to set proper ip address. Otherwise if you are flashing using USB to Serial converter platformio may detect the COM port for you. Just comment out upload_port variable. You have two options on how to upload the firmware to your board: Either use OTA or connect GND/RX/TX/RST pins to the board using your favorite ESP8266 programmer. Note that your programmer(or USB to Serial converter) must be set to use 3.3V signals, otherwise you may kill the board.\nNote about PUYA Some ESP-12 modules have a weird flash chip which causes errors with writing data to SPIFFS partition. That means, that you can flash SPIFFS data, you can read it in the code, but if you try to write to any file on that partition - the whole partition will be corrupted. This is known as PUYA issue. If you happen to have the ESP-12 with this troublesome flash chip, you should set build_flags = -D define PUYA_ISSUE in the platformio.ini file for the variant you are building.\nUnfortunately until PUYA issue is fixed in the ESP firmware, SPIFFS will not be available and in turn UI interface is useless since you cannot save any configs to the SPIFFS partition.\nUpload using OTA You can flash the board using OTA if it is connected to your WIFI network and you know it's IP address. Simply put it into platformio.ini file, power-cycle the board and click upload. OTA flashing is only available after the power-cycle, since it will stay awake for at least 1 minute before going to sleep and normal operation. Note: Keep track of the firmware size. The firmware size must be below half of the free flash memory(not used by SPIFFS), since the bootloader has to keep two versions of the firmware at the same time during flashing.\nUpload using a programmer I have built a simple programmer along with an OLED display to develop the firmware and flash production firmware. It is basically based on a Weemos development board with ESP-12 module desoldered and attached to a breadboard with headers and OLED display using some jumper cables like so: I simply stick the ESPWeather board onto the pins and click \u0026quot;Upload\u0026quot; in Atom IDE :) You can use a different setup, just that I find this quite comfortable to work on my boards before I solder OLED screens. Previously I was using POGO pins and connected them directly to the soldered ESP-12 module which I find not only uncomfortable, but also unreliable. In the future I am planning on designing a programming rig using 3D printed parts and specifically designed programmer for that purpose. Just note, that for programming GPIO0 pin should be low. You may need to power cycle the device and/or reset it a couple of times to be able to flash it.\nSetting up configuration using Web interface By default I flash the boards with UI enabled. When you first power up the board, ESP will go into AP mode with AP Name \u0026quot;ESPWeather\u0026quot;. You can connect to this AP and connect to 192.168.4.1 IP address. There you will be greeted with a welcome message and a configuration form, where you can input Host Name for the Weather Station(it will be used as AP name once you power it up again), WIFI connection details and MQTT details. You will also be able to see telemetry data in real time. UI will only be activated after a power cycle, meaning every time you power up the board, and the board will go into deep sleep after 5 minutes if no connection to the web server was made. This mode will not activate after the board wakes up from deep sleep, so you don't need to worry about somebody connecting to your Weather Station and changing/retrieving any settings. Note: UI interface is only available if you build your firmware with ESP_WEATHER_VARIANT_UI defined.\nLinks Schematics: Easyeda Project Sources: Github Tindie: Store ","link":"https://itohi.com/blog/building-esp8266-weather-station-part-ii/","section":"esp-weather","tags":["arduino","esp8266","IoT","Sensors"],"title":"Building ESP8266 Weather station with BME280 (part 2)"},{"body":"","link":"https://itohi.com/esp-weather/","section":"esp-weather","tags":null,"title":"Esp-weathers"},{"body":"There are a lot of forests in Lithuania which I like exploring on my bike. In the past a lot of Lithuanian resistance troops resided in those forests, so there is a big probability to stumble upon a stash of some kind. However that stash might as well be a grenade or a bomb of some kind, but nevertheless I always wanted to combine my motorcycle riding through the woods with treasure hunting and some time ago I decided to build a simple metal detector. Granted there are lots of metal detector designs, like BFO, VLFD, PI and so on (I'll briefly cover some of them in the theory section). Some of them I've tried in the past with various results and then during one boring evening of browsing the internet I stumbled upon this blog and decided to build this type of metal detector. The design is really simple - there is a simple oscillator circuit and a frequency counter. When the coil passes over or near various ferromagnetic or paramagnetic materials the frequency of the oscillator changes and based on this change you can decide where to dig. Moreover since the frequency counter can be implemented on any microcontroller you can analyse the frequency change in many different ways potentially enabling metal differentiation and even filter out frequency drift, that plagues other types of detectors.\nThe code for this project can be found here in the folder arduino/MetalDetector. Folder arduino/MetalDetector/third-party contains the code that inspired this project.\nAlong with the Arduino source code you will find there OpenSCAD files and STL files of the 3D printed parts for this project except for the screw, that holds arm and coil parts.\nMetal detector types BFO Beat Frequency Oscillator is the most simple and easy to build and operate metal detector. It consists of two oscillators running at the same frequency and the main coil of one of the oscillators is exposed, i.e. being the search coil. When there is no metal object near the coil, two oscillators are tuned to be of the same frequency. The signals from these oscillators are summed together and they generally either cancel out or produce a single tone, which is filtered out. This tone is of higher frequency than the human can hear or the headphones can reproduce, so this silence is regarded as \u0026quot;no object\u0026quot;. However when a metal object is introduced near the search coil, the oscillator resonance frequency changes and consequently after being mixed with the fixed frequency oscillator starts to give off non-zero frequency which can be heard. And depending on the pitch of that tone one can gauge how close or how big the metal object is. It is fair to note, that not only metal can induce said tone. Anything, that changes either capacitance or inductance of the oscillator resonant circuit will change the resulting pitch of the tone. So if one wishes to build such a metal detector must properly isolate the coil and the two oscillators from environment in such a way, that only search coil inductance would be affected.\nBy the way, also the two oscillators must be built in a very similar way using very similar devices (transistors) in order to eliminate temperature drift as much as possible.\nVLFD Very Low-Frequency Detector is quite popular type of metal detectors. It consists of two electrically tuned coils, usually arranged in D shapes forming a circle. One coil acts as a transmitter, while another as a receiver. Metal object introduced in the alternating induced magnetic field changes the phase of the received signal. Depending on the received signal phase depth and roughly type of metal can be determined. Also frequency of the transmitted signal can be changed which adds another dimension to the phase response analysis.\nPI Pulse Induction is another way to measure presence of metallic objects near search coil. The operation is as follows: transmitting coil is being pulsed with short pulses of current. That in turn induces pulsed magnetic field around the coil. Presence of any metallic objects changes the shape and dynamics of this pulsed electromagnetic field as in the previous examples, however in this case during current off stage of the pulse back-emf of the coil is being measured. Or more precisely the time it takes for the induced magnetic field to collapse.\nMagnetostriction based metal detectors This type of metal detection is rather complicated and involves a very interesting phenomena - magnetostriction. In simple words, when a metallic object is placed in alternating magnetic field it starts to vibrate. Conversely if a metallic object is placed inside a constant magnetic field and is being vibrated (e.g. by ultrasound) it starts to generate alternating electromagnetic field (anti-shoplifting security tags rely on the same effect). Very interesting result of magnetostriction based metal detection is ability to discriminate between different materials, as every metal produces quite a different signal.\nMagnetostriction based metal detector consists of an ultrasound transducer and a receiving coil. Earth's magnetic field is used for the required constant magnetic field. Ultrasound permeates the soil, hits the metal object and induces acoustic vibration in it. Due to magnetostriction, this metal being in constant Earth's magnetic field starts to generate alternating electromagnetic field, which in turn is picked up by the receiving coil, amplified and analysed.\nThis method is fundamentally different than the other methods of detecting metals, because it does not measure in any way the magnetic permeability of the environment.\nMetal detector using an oscillator and arduino with OLED Arduino (or any other microcontroller or platform) can be used for either VLF or PI metal detector, however I wanted to build a metal detector during a single evening. And then I stumbled upon this blog, where a metal detector is being discussed which appears to be an extremely simple using not less simple principle - arduino simply measures generated signal frequency by a simple Collpits generator circuit, which is identical to the one in the blog post except that I've added an emitter follower in order to isolate the oscillator output from the wires and arduino. Without this isolation output frequency changes drastically even if you hold your hand near the arduino module :)\nOperation The search coil has integrated Collpits oscillator with a buffer circuit, which generates the signal of around 660kHz. This signal is picked up by an Arduino Pro Mini board (using Atmega168), the frequency is being measured. 32 points of the measured frequency are stored in a FIFO buffer, scaled to fit 128 pixels of the display and drawn on the 128x32 OLED display together with battery indicator.\nThe oscillator needs to warmup for some time, but that is not really necessary - because once you start swinging the search coil and it finds any metal, there will be a spike on the graph. If the frequency of the oscillator haven't settled before that - the graph will not be horizontal. Conversely once it settles - the graph will be horizontal. No calibration or zero-in is required for this kind of operation :)\nConstruction Here is the picture of the assembled metal detector using 3D printed parts:\nHere in the picture you can see the search coil wound on the 3D printed coil carcass, braided wire that connects the search coil and the Arduino, and battery holder with the arduino itself and OLED.\nThe search coil has the oscillator integrated. Oscillator is assembled from SMD components, mainly resistors, condensators and BC846 transistors. The board of the oscillator is wrapped in copper foil in order to insulate it from the environment. I don't remember how many turns there are in the coil, but something around 15-20. I think the lower number of turns, the better, as the frequency is higher and frequency change due to inductance change with metal present is bigger which makes metal detection more sensitive. Also the higher the frequency the faster is the frequency counter response. Although there is a tradeoff of the signal frequency and the sensitivity due to the condition of the soil. If the soil is mineral-rich and moist, it may be quite conductive thus blocking high frequency signals from penetrating thus limiting accuracy and sensitivity. The windings of the coil are sealed with epoxy glue.\nThis is how the insides of the detector look like:\nArduino Pro Mini and OLED are soldered to a small breadboard along with the voltage divider, push-button switch and header for the search coil. The whole thing is glued to the two 18650 Li Ion batteries, which are glued to the bottom of the enclosure. Below is the zoom-in on the Arduino Pro Mini:\nAs you can see, the OLED display is connected to the I2C interface of the Arduino, voltage divider of the battery is connected to the A0 analog pin and the signal from the search coil oscillator connected right to the digital pin 5.\nThe oscillator circuit is placed as close to the coil as possible:\nOscillator circuit:\nOscillator receives direct power from two 18650 cells connected in series, and outputs the generated signal. And here is the signal, that is received from the coil:\nThe quality of the signal is not important(clearly I haven't put much consideration into Q2 base current), as all that matters is the triggering of arduino pin, which is configured to a counter register.\n3D printed parts 3D Printed parts were designed with OpenSCAD and printed with Geeetech Rostok 301 3D printer:\nSummary The project took me more than an evening, I'd say even more than a couple of weekends to assemble and program. There were different iterations. At first I've designed a different coil with around 30 turns, completely enclosed in epoxy glue. Also I've used a NOR gate as the oscillator buffer which worked much better than a single transistor in the final version... Although the coil was rather big - about 30cm in diameter which lowered it's sensitivity for small objects. Smaller and 3D printed coil proved to be much more stable both mechanically and electrically, however due to rather strong coupling it is sensitive even to moving my hand near the wires or even near the enclosure. I tried different approaches for frequency measurement. At first tried the same code as in the original blog post. Then after the concept proved to be viable, I added the OLED screen and moved to a frequency counting library.\nI haven't yet had a chance to test it outdoors, but indoors it finds metal construction under the floor(around 15cm of concrete along with laminate). I wonder how it would perform with different soils.\nAt some time in the future I plan to design the coil and oscillator circuit board, experiment with VLF and PI detector designs.\nThere is a warning to be said, by the way. In some countries it is illegal to construct and use metal detectors, so make sure you check with your authorities before replicating this project.\n","link":"https://itohi.com/blog/metal-detector-using-frequency-counter-and-oled-display/","section":"blog","tags":["arduino","AVR","Sensors"],"title":"Arduino Metal Detector using frequency counter and OLED display"},{"body":"","link":"https://itohi.com/tags/avr/","section":"tags","tags":null,"title":"AVR"},{"body":"There are many different ways to develop and deploy embedded solutions, one of the most popular ones would be Arduino IDE. But the editor is very simplistic, without handy features such as intellisense, code refactoring and many others. I've used AVR Studio, IAR, even VIM to develop code for AVR/STM microcontrollers.. But they are either designed specifically for that platform or are commercial products. And I love Open Source :)\nThere are two Open Source IDEs that I've tried: Atom and Visual Studio Code together with PlatformIO. This post is about setting up Atom with PlatformIO to develop and deploy for many different embedded platforms. It also supports other languages, such as Python, HTML, CSS, JS, etc.\nDownloading and installing First we need to download and install Atom. Installation instructions can be found on the Atom page, so I won't duplicate them here.\nHowever Atom itself is just an IDE with a lot of various extensions. We need to install Platformio packages:\nYou should definitely install other packages (e.g. git) that you would use.\nAfter all the installation and restarting of Atom we should have PlatformIO:\nHere is a list of packages that I use:\nautocomplete-clang git-plus git-log git-diff-details linter-gcc platformio-ide platformio-ide-terminal platformio-ide-debugging project-manager github language-c language-git language-html language-css language-javascript language-python language-typescript Before creating or opening any projects we should install frameworks and boards. As for libraries... I personally don't like to install libraries globally - I tend to put them into platformio.ini project file.\nConfigure Platformio This step is also very easy with Platformio package/library managers. First we need to install platforms. You can see a list of already installed platforms on my machine:\nNow you are ready to start your projects using Platformio and Atom.\n","link":"https://itohi.com/blog/developing-with-atom-ide-and-platformio/","section":"blog","tags":["atom","platformio"],"title":"Arduino Developing with Atom IDE and PlatformIO for AVR and ESP chips"},{"body":"","link":"https://itohi.com/tags/development/","section":"tags","tags":null,"title":"development"},{"body":"","link":"https://itohi.com/categories/howto/","section":"categories","tags":null,"title":"howto"},{"body":"","link":"https://itohi.com/tags/platformio/","section":"tags","tags":null,"title":"platformio"},{"body":"","link":"https://itohi.com/tags/python/","section":"tags","tags":null,"title":"Python"},{"body":"VS Code is an light but powerful editor developed by Microsoft. I have been using this editor for Python and embedded development(using PlatformIO) for a few months now.\nUsing PlatformIO with VSCode is rather simple - just install it through built in package manager and you're good to go. However python development needs a bit more work to setup properly. Especially if you want to develop Django apps with VSCode. That is what I'll be covering here in this post.\nConfigure Python virtual environment Of course you could use globally installed Python, however having independent virtual environments for each project or experiment brings a lot of benefits. For example, you can always spin a fresh virtual environment, install required modules, test if your code works as expected and release it. Or you could just copy existing virtual environment, update modules to their newest versions and then test if your project still works as expected before upgrading those modules on your production environment. Even if you only want to experiment with python, it is always a good idea to start from a new virtual environment. At least I have acquired a habit of creating a new virtual python environment every time I start a project...\nvirtualenv So, if we want to work with virtual environments, we need to install virtualenv package first. virtualenv is a tool used to create isolated Python environments. virtualenv creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n1pip install virtualenv You can test your installation using this command:\n1virtualenv --version To create a virtual environment inside your current directory:\n1virtualenv my_project This will create a directory my_project inside your current directory with all the necessary executables, modules and so on using your current python installation. In case you have more than one python version installed, you can choose whatever python version you want like this:\n1virtualenv -p /path/to/your/python/executable/python2.7 my_project To activate your newly created virtual environment on Linux:\n1source my_project/bin/activate or for Windows(You have to first enable it by configuring set-executionpolicy to e.g. remotesigned):\n1my_project\\bin\\activate.ps1 This will replace environment variables in such a way, that your current python interpreter along with all the installed modules will become the ones from your virtual environment.\nvirtualenv wrapper There is a wrapper around virtualenv, that allows for much more easier management of virtual environments. This tool is called virtualenvwrappervirtualenvwrapper and virtualenvwrapper-win for Linux and Windows environments respectively. Installation is easy using pip. Usage is also very easy. In order to create a virtual environment use:\n1mkvirtualenv my_project Virtual environment will be automatically activated. When you want to exit the virtual environment:\n1deactivate If you want to select another virtual environment:\n1workon my_project_1 There are other commands and I encourage you to go to the virtualenvwrapper page and learn about them.\npipenv There is another alternative to virtualenv or virtualenvwrapper that is called pipenv which is a dependency manager for Python projects. Pipenv manages Python modules on a per-project basis. Before installing any packages pipenv creates a Pipfile, creates a virtual environment and installs the packages:\n1cd my_project\u0026lt;br /\u0026gt;pipenv install requests This will create a Pipfile which is used to track dependencies for your project, much like requirements.txt file that you populate with pip freeze.\nI personally prefer virtualenvwrapper over other options.\nConfigure VSCode for python After you have your virtual environment, you can begin configuring VSCode. First of all you need to install Python for VSCode. To do that, go to Extensions section and type \u0026quot;python\u0026quot; into search box. The very first entry reading Python will be the package we're looking for:\nYou can go to Settings-\u0026gt;Settings and start configuring python from there, but that would setup python globally for every project. I would suggest having a settings file template somewhere and edit .vscode/settings.json file every time you create a new project. That would allow having independent virtual environments for each project. When you create a project, VSCode creates .vscode directory inside your project directory and creates settings.json file there which is empty. By the way, since I'm mainly developing from Windows, all my paths will be Windows-style. You should change the paths to the ones relevant for your installation. Linux paths are a bit different, but the principle remains.\nSo, after you've got your project in VSCode, go to Settings-\u0026gt;Settings, and select Workspace Settings. You should see something like this:\nThen copy\u0026amp;paste these values on the right:\n1{ 2 \u0026#34;python.pythonPath\u0026#34;: \u0026#34;c:\\\\Users\\\\FoxIS\\\\Envs\\\\itohi\\\\Scripts\\\\python.exe\u0026#34;, // virtual environment python binary 3 \u0026#34;python.linting.pep8Enabled\u0026#34;: true, 4 \u0026#34;python.linting.pylintPath\u0026#34;: \u0026#34;c:\\\\Users\\\\FoxIS\\\\Envs\\\\itohi\\\\Scripts\\\\pylint.exe\u0026#34;, // virtual environment pylint binary 5 \u0026#34;python.linting.pylintArgs\u0026#34;: [ 6 \u0026#34;--load-plugins\u0026#34;, 7 \u0026#34;pylint_django\u0026#34; 8 ], 9 \u0026#34;python.linting.pylintEnabled\u0026#34;: true, 10 \u0026#34;editor.rulers\u0026#34;: [ 11 80, 12 120 13 ], 14 \u0026#34;launch\u0026#34;: { 15 \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, 16 \u0026#34;configurations\u0026#34;: [ 17 { 18 \u0026#34;name\u0026#34;: \u0026#34;Django\u0026#34;, 19 \u0026#34;type\u0026#34;: \u0026#34;python\u0026#34;, 20 \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, 21 \u0026#34;stopOnEntry\u0026#34;: true, 22 \u0026#34;pythonPath\u0026#34;: \u0026#34;${config:python.pythonPath}\u0026#34;, 23 \u0026#34;program\u0026#34;: \u0026#34;${workspaceRoot}/manage.py\u0026#34;, 24 \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceRoot}\u0026#34;, 25 \u0026#34;args\u0026#34;: [ 26 \u0026#34;runserver\u0026#34;, 27 \u0026#34;--noreload\u0026#34;, 28 \u0026#34;--nothreading\u0026#34; 29 ], 30 \u0026#34;env\u0026#34;: {}, 31 \u0026#34;envFile\u0026#34;: \u0026#34;c:\\\\Users\\\\FoxIS\\\\Envs\\\\itohi\u0026#34;, //virtualenv path, change to whatever suits your system 32 \u0026#34;debugOptions\u0026#34;: [ 33 \u0026#34;WaitOnAbnormalExit\u0026#34;, 34 \u0026#34;WaitOnNormalExit\u0026#34;, 35 \u0026#34;RedirectOutput\u0026#34;, 36 \u0026#34;DjangoDebugging\u0026#34; 37 ] 38 } 39 ] 40 } 41} Then of course change the paths to python that are valid on your machine. In order to use pep8 and pylint, install those modules on your virtualenv:\n1pip install autopep8 2pip install pylint Now you should be ready to develop Python code and run Django development server from VSCode! :)\nPS. You can enter launch configuration into a separate launch.json file instead of the workspace configuration (\u0026quot;launch\u0026quot; json key). Also it is possible to instruct VSCode to automatically create launch.json file for you with already predefined python configurations. Just go to Debug section and select cog icon and select Python: ","link":"https://itohi.com/blog/python-development-with-visual-studio-code/","section":"blog","tags":["development","Python","Visual Studio"],"title":"Python development with Visual Studio Code"},{"body":"","link":"https://itohi.com/tags/visual-studio/","section":"tags","tags":null,"title":"Visual Studio"},{"body":"Ever since I started playing around with ESP modules I wanted to measure weather conditions in multiple location at home, friends, etc. The best way to achieve that would be to build a station that gathers various environment parameters and publishes them somewhere. That is what I've done. The very first prototype was done using ESP-1 module, DHT-11 humidity sensor and BMP280 breakout board. The station publishes gathered data to a MQTT broker from where it can be further gathered and analysed.\nBasically the operation of the station is as follows: the station will try to connect to configured multiple Wifi networks and if no such were found, will try open networks. Then it will connect to MQTT broker and announce telemetry data until 30 seconds elapses. In that case it will go to deep sleep for 30 minutes and the process starts over.\nDuring development and playing around, three variants were born: OLED, E-Paper and Headless.\nThe source code for the station is here.\nFeatures mDNS OTA Connect to free wifi or one of configured networks MQTT Pub/Sub Report temperature Report relative humidity Report air pressure Report battery voltage Monitor and display several other station telemetry Headless OLED display E-Paper display Configure Wifi networks via MQTT Configure station name via MQTT Configure station names to be monitored via MQTT Persistent telemetry MQTT messages General operation Each station variant tries to connect to either open wifi or one of configured wifi networks giving priority to configured networks. After that it tries to connect to a configured MQTT broker. Once initial telemetry data is available, starts to publish telemetry data to MQTT broker every 1s. After 30s of bootup will go to deep sleep. After 30 minutes will wake up and repeat the cycle. OLED/E-Paper variants also display gathered telemetry data. Calculated power demand is around 1mAh and can be lowered by reducing time spend awaken and removing LEDs from ESP module. Also higher resistor value for voltage divider could be used. Configuration of the station is done via MQTT messages. E.g. to set a name for device \u0026quot;18:FE:34:A7:05:1A\u0026quot; one should publish a string e.g. \u0026quot;Balkony\u0026quot; to \u0026quot;18:FE:34:A7:05:1A/name\u0026quot;. E-Paper variant is a little bit different. You can specify up to three other station names to display by separating names with a space, e.g. \u0026quot;paper room Balkony closet\u0026quot; to \u0026quot;18:FE:34:A7:05:1A/name\u0026quot;.\nHeadless DHT-11 and BMP280 modules can be seen in the photo, as well as Li-Ion battery and ESP-1 module. I had to solder wires directly GPIO16 and ADC of the ESP chip. It's not that hard as it looks, all that is needed - a little bit of flux, steady hands and thin soldering iron :) By the way, since there are very little GPIO pins available, I use RX/TX pins for I2C interface. I2C devices seem not to mind an initial burst of bootup information. I never changed the pins for ESPWeather variants that use ESP12 modules.\nOLED After some time I grew tired of checking up my phone for MQTT readings just to check what is going on at my desk, so I've built an OLED variant. Since I already have I2C interface for BMP280 sensor, all I did was hook up an OLED screen to SDA/SCL and thus OLED variant was born. Also I had to add some code to support that, of course, and since I had plans for other display types support in the future, I've created a neat C++ interface to easily swap display types during compile time.\nE-Paper As I was starting to accumulate a number of weather stations put in different places and I found smartphone MQTT client app invonvenient, I decided to use one of my Waveshare 2.13\u0026quot; E-Paper displays. I figured since it is ultra low power the whole station should last a very long time between charges. The display width allows to display data gathered from four stations. For this particular station I had to use ESP-12 module instead of ESP-1 as the latter lacks adequate number of GPIO pins :) This station does the following - connects to the MQTT broker, subscribes to station announcements channel and catches messages from preconfigured station names and displays them after all the readings are gathered. Just before going to deep sleep.\nConstruction DHT11 and BMP280 modules are used in this station for prototypes. BME280 or even BME680 will be used in production. SSD1306 and 3 colour 2.13\u0026quot; E-Paper HAT are used for OLED and E-Paper variants respectively. For E-Paper prototype Wemos D1 mini was used and later replaced with standalone ESP-12F module. For battery management I used a TP4050 micro-usb module with protection circuitry. If one has Lipo/LiIon batteries with protection in possession, then protection-less charging boards can be used.\nI plan adding a 6V solar panel so I could start measuring outside temperature without worrying about the battery. OLED variant in the above picture does not use any charging circuitry as it is meant for always-connected (or battery-pack) usage. However please note, that most battery packs will disconnect the battery from the station once it goes into deep sleep mode due to extremely low current consumption. Cases for these can be 3D printed.\nRx is SCL Tx is SDA GPIO 2 is 1-Wire interface for DHT11 GPIO 13, 14, 15, 5, 12, 4 are for EPD signals: DIN, CLK, CS, DC, RST, BUSY respectively TOUT or ADC is for battery monitoring and connected to battery input via 1/10 voltage divider (ADC can measure up to 1.0V, so this scale factor is quite convenient) sourced on Ebay: DHT11 for ESP-1S module, BMP280 board, TP4050 lipo micro-usb charger board, SSD1306 and 2.13\u0026quot; RPI-Zero E-Paper HAT (Waveshare) LiIon Batteries from various dead cell phones and cheap Chinese video registrators Cloning Since I use git submodules (for EasyOTA), cloning must be done using --recurse-submodules option:\n1git clone --recurse-submodules https://github.com/itohio/ESPWeather.git 2git checkout 10a7188545d1faf004c2990fb229bb47a6dc7dfc Configuration Please look at sample_wificonfig.h file, select relevant features, add default Wifi credentials, MQTT connection details and build after selecting appropriate board. Note, that wifi connection and MQTT are required if one wants to configure the station, e.g. changing the name or adding more access points.\nBuilding PlatformIO is used for this project. Just clone the project, import it into platformio, select board info and build. Flashing is also done this way. platformio.ini file contains some example upload_port values for OTA flashing. One can always use hostnames instead of ips. It's just that my bonjour service is confused because of different stations occupying the same hostname.\nBattery monitoring I use 100k trim pot directly across battery connector to the DH11 board, trim it to 1/10th of the battery voltage and solder the center tap to a TOUT pin right to the ESP8266 chip. I suggest flashing the ESP-1 module before soldering, so that the wire wouldn't be stressed to much. Discrete resistors for voltage divider can be seen in some the photos - this is because I ran out of trim pots:) And the dividing factor is not really precise, since I did not have 90k resistors and opted out for 2x51k + 10kx1k resistors. For the prototypes I am only interested in monitoring approximate voltage drop for the batteries and approximate point when DHT11 fails to provide meaningful readings. At about 2.80V of battery voltage DHT11 library returns nan. This voltage is even too low for ESP, but surprisingly it survives until 2.65(minus voltage drop across ldo).\nDeep Sleep function For waking up from Deep sleep GPIO 16 must be connected to RST. So more fine soldering skills are required in case of ESP-1. ESP-12 is more forgiving in that regard.\nReducing current consumption I've measured 1.8ma current in deep sleep. That means that the station sleeps for 30 minutes with 1.8mA current consuming 1.8mAh(I assume it never goes away). During all the communication and measurements somewhere around 70-90 mA are flowing to the ESP. So let's say it's 75mA for 30s. That translates to 0.625mAh. Therefore 800mAh battery would last a long time (about 13 days). Sadly, the batteries I am using in the photos are pretty much dead and charge up to around 75-120mAh. Which lasted for about 40 hours which confirms current consumption measurements and rough calculations to a degree. That was with two LEDs being constantly lit and an onboard regulator. Which I am surprised by, by the way. One can always remove those buggers, but I figured that with solar panel the station would run almost indefinitely and would have plenty of run time for home usage with a 800mAh battery. By removing the blue LED current drops to ~400uA during deep sleep and the dead'est battery still runs for 4 days already at 3.75V.\nTopics being published by the station announce Station will publish it's name to this topic once it connects to MQTT broker. Initially it will be a MAC address of the ESP. One can configure a different name by publishing to {station name}/name a new name which will be saved on the station.\n{station name}/temperature Temperature of the surroundings in deg. centigrade.\n{station name}/pressure Air pressure of the surroundings in milli Bar.\n{station name}/humidity Air relative humidity in percentage.\n{station name}/battery Battery voltage in volts.\nTopics being subscribed by the station {station name}/name Publishing to this topic will change station name. Station name must not contain neither commas nor spaces as these symbols are reserved for E-Paper variant. One can specify a list of station names separated by a space or comma, so that measurement from those stations can be monitored. E.g. \u0026quot;paper OLED outside mobile\u0026quot; was used in the E-Paper variant shown in the photo. That means, that E-Paper variant's name was set to \u0026quot;paper\u0026quot; and three other stations were monitored: OLED, outside and mobile. Since each station published persistent telemetry messages, the latest data is being monitored and subsequently displayed on the E-Paper display.\n{station name}/apadd Publishing to this topic will add another Wifi Network. One must supply a space delimited ssid and password, e.g. ssid password. This will be saved to the station and it will try to connect to this and other saved APs on boot.\n{station name}/apremove Publishing to this topic will remove the ap. One must publish ssid of the network that one wishes to remove.\n{station name} This topic accepts following publishes:\nSLEEP Forces the station to sleep for preset time (around 30 minutes).\nNOSLEEP Disables sleeping of the stations. This does not percist after restart. Useful for OTA development/etc.\nRESTART Forces restart of the station.\nPING Forces to announce it's name on announce topic. Useful for station status monitoring.\nThings to note RX/TX pins Due to pin count limitation on ESP-1 RX and TX pins are used for I2C bus. I2C stations seem to survive initial burst of boot info that is fed during bootup, but programming via serial while these pins are still connected to OLED/BMP280 is not advised. I've tried it, but ESP-12 module does not boot.\nSPIFFS Until now (20180216) ESP-01 with PUYA flash chips are not supported by the SPIFFS library (it can read uploaded, but not properly write files.). As a workaround one can publish config topics with persistent messages. E.g. setting name of the station. Setting up Wifi in this fashion isn't really useful for obvious reasons though.\nBMP280 For some reason very first measurement is way too high (both temperature and pressure). I've tried several libraries with no luck. In fact Adafruit_BMP280 library gives way too high readings all the time. The one I'm using currently (BMP280) is simplistic and allows to set different oversampling values and gives the most accurate readings except for the very first. To remediate that I skip several first readings.\nDHT11 Sometimes DHT11 will not read any data. And most of the time when the battery is almost depleted (\u0026lt;2.8V) there are no readings.\n","link":"https://itohi.com/blog/building-esp8266-weather-station-part-i/","section":"esp-weather","tags":["arduino","esp8266","IoT","Sensors"],"title":"Building ESP8266 Weather station with BME280 (part 1)"},{"body":"I was always fascinated with balancing robots and wanted to build one myself. Some time ago I started collecting IMU, arduino boards, wheels, motors for other wheeled robots and one day decided to build a balancing robot instead. I've used wheels from old four wheel drive robot that used mouse sensors for odometry and was driven by an Arduino Pro mini. That robot never went alive anyway :)\nOriginally the robot was built using Arduino pro mini and all it could do was balance. I was thinking to add BT module to control it until I discovered that I have ESP8266 lying around. Also I decided to use a better IMU algorithm instead of DPU of the MPU6050. Thus the ESPBalancingRobot was born. It does use DC motors to balance and no encoders. Speed is being estimated using PWM signal averaging and constant angle is maintained using a double stage PID controller.\nThe source code for the robot can be found on GitHub.\nConfiguration before Building Before building and uploading please create wificonfig.h file with the following contents:\n1#define WIFI_SSID \u0026#34;ssid\u0026#34; 2#define WIFI_PASSWORD \u0026#34;password\u0026#34; 3#define ARDUINO_HOSTNAME \u0026#34;hostname\u0026#34; If you fork the repo, you can still have this file as it is in .gitignore and won't be added during commit.\nBuilding and flashing PlatformIO was used to develop the code, therefore the structure of the project conforms to what PlatformIO expects. Flash the ESP module first before soldering anything. Also upload SPIFFS. After that it is possible to use OTA, just don't forget to configure ESP to connect to your local network. You can start assembling the robot.\nConstruction Wheel base Wheel base consists of two geared motors, some scrap wheels and a 3D printed motor holder which is basically a tube with slots to hold wooden sheet. Later I added pads so that the robot wouldn't suffer much after falling over.\nMotor controller I used a 1A motor controller based on L293, however chinese manufacturers seemed to be too secretive about the chip used... Even though they advertise it as L293 motor controller board on ebay :)\nElectronics The robot is powered by two LiIon batteries salvages from old laptop battery. There is a dc-dc buck converter that supplies 3.3V for electronics, some random power switch, ESP-1 module and an MPU6050 board. Also some pullups, capacitors and a trim potentiometer for battery monitoring (turned down to 1:10 ratio).\nIMU was used a simple MPU6050 and can be seen under the ESP module. It is glued by hot glue to the battery holder. Alignment is not perfect, but staged PID adjusts for that.\nThe ESP-1 module For robot control we need six pins(not counting ADC pin for battery monitoring): 2x for I2C, 4x for PWM control. As ESP-1 module clearly doesn't have enough pins we need to add those. With a steady hand, small soldering iron, some flux and good eyes it is possible to solder those additional ports directly to the ESP chip pins.\nI used RX/TX pins for I2C as the chip emits some noise on those pins while booting and MPU doesn't seem to be upset about that. Although the motors might be.\nAlso I had to add pullUP resistors to GPIO0 and GPIO2 and a beafy capacitor on the 3.3V rail.\nOne thing to mention about the motors. For some reason one of my motor drivers and ESP modules during the early stages of the build just died on me. I figured that it had something to do with cheap motor driver burnup. So this time I added 1k resistors in series just to be safe.\nTheory of operation Mostly inspired by 5pqri1 EspWay balancing robot.\nPID tuning It is possible to tune PID controllers by building the firmware with\n1#define USE_LOGGING 1 somewhere in the beginning of the code. The UI changes somewhat and allows to see the realtime graphs of speed/angle values and also provides some sliders to set pid values. There are some issues, though with the ESPUI, as if I add all the controllers (for both PIDs), the ESP crashes. Also adding all the desired controls consumes to much flash size so the OTA doesn't allow to flash due to size limitations.\n","link":"https://itohi.com/blog/building-esp-1-balancing-robot/","section":"blog","tags":["arduino","esp8266","PID","PID Control","Robots"],"title":"Building ESP-1 balancing robot"},{"body":"","link":"https://itohi.com/tags/differential-drive/","section":"tags","tags":null,"title":"Differential Drive"},{"body":" As I've mentioned in the last blog post, I was trying to build a four wheel drive robot using arduino that utilizes two A3080 mouse sensors for odometry. Sadly that project never got finished and I disassembled the robot and built a balancing robot instead. However later I decided to not abandon the four wheel drive robot and ordered several ADNS3080 sensors with proper optics, obtained an electric wheelie toy, which lead to the birth of this WiFi controlled toy car.\nThe source code for this project can be found here.\nHow it works Chinese HBridge driver and ADNS3080 mouse sensor module are connected to Wemos D1 mini which serves a simple web page that allows to control the robot using touch gestures. Image retrieved using ADNS3080 is transferred to the web page using WebSockets as well as commands sent to the robot.\nThe robot is powered using two LiPo 1200mAh batteries forming a 2S1P battery. A potentiometer connected to GND and Battery Plus scales battery voltage which is fed to Analog pin of the Wemos board and subsequently is displayed on the web page.\nMechanically the robot consists of four wheels with each sides spinning independently. Interestingly enough, this toy has two wheels of the same side connected to one motor. So that all two pairs of wheels rotate independently like in a tank.\nAfter finishing this project I decided to refactor differential drive and ADNS3080 sensor code into a separate library, that I call EasyLocomotion. This little library has different driving algorithms for wheeled as well as legged robots and is still in development.\n","link":"https://itohi.com/blog/esp8266-wheelie/","section":"blog","tags":["arduino","esp8266","Differential Drive","Robots"],"title":"ESP8266 Wheelie"},{"body":"","link":"https://itohi.com/tags/pid/","section":"tags","tags":null,"title":"PID"},{"body":"","link":"https://itohi.com/tags/pid-control/","section":"tags","tags":null,"title":"PID Control"},{"body":"","link":"https://itohi.com/categories/robots/","section":"categories","tags":null,"title":"robots"},{"body":"","link":"https://itohi.com/tags/robots/","section":"tags","tags":null,"title":"Robots"},{"body":"","link":"https://itohi.com/series/","section":"series","tags":null,"title":"Series"}]